{"ast":null,"code":"import _regeneratorRuntime from \"/Users/tulioalbu/Desktop/Estudos/makeyourburger/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/tulioalbu/Desktop/Estudos/makeyourburger/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport MessageComponent from \"./MessageComponent.vue\";\nexport default {\n  name: \"BurgerFormComponent\",\n  data: function data() {\n    return {\n      paes: null,\n      carnes: null,\n      opcionaisdata: null,\n      nome: null,\n      pao: null,\n      carne: null,\n      opcionais: [],\n      msg: null\n    };\n  },\n  methods: {\n    getIngredientes: function getIngredientes() {\n      var _this = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var req, data;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(\"http://localhost:3000/ingredientes\");\n            case 2:\n              req = _context.sent;\n              _context.next = 5;\n              return req.json();\n            case 5:\n              data = _context.sent;\n              _this.message = \"Pedido n\\xBA \".concat(res.id, \" criado com sucesso!\");\n              _this.paes = data.paes;\n              _this.carnes = data.carnes;\n              _this.opcionaisdata = data.opcionais;\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    },\n    createBurger: function createBurger(e) {\n      var _this2 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var data, dataJson, req, res;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              e.preventDefault();\n              data = {\n                nome: _this2.nome,\n                carne: _this2.carne,\n                pao: _this2.pao,\n                opcionais: Array.from(_this2.opcionais),\n                status: \"Solicitado\"\n              };\n              dataJson = JSON.stringify(data);\n              _context2.next = 5;\n              return fetch(\"http://localhost:3000/burgers\", {\n                method: \"POST\",\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                },\n                body: dataJson\n              });\n            case 5:\n              req = _context2.sent;\n              _context2.next = 8;\n              return req.json();\n            case 8:\n              res = _context2.sent;\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }))();\n    }\n  },\n  mounted: function mounted() {\n    this.getIngredientes();\n  },\n  components: {\n    MessageComponent: MessageComponent\n  }\n};","map":{"version":3,"names":["MessageComponent","name","data","paes","carnes","opcionaisdata","nome","pao","carne","opcionais","msg","methods","getIngredientes","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","req","wrap","_callee$","_context","prev","next","fetch","sent","json","message","concat","res","id","stop","createBurger","e","_this2","_callee2","dataJson","_callee2$","_context2","preventDefault","Array","from","status","JSON","stringify","method","headers","body","mounted","components"],"sources":["/Users/tulioalbu/Desktop/Estudos/makeyourburger/src/components/BurgerFormComponent.vue"],"sourcesContent":["<template>\n  <div>\n    <MessageComponent :message=\"message\" v-show: message />\n    <form id=\"burger-form-component\" @submit=\"createBurger\">\n      <div class=\"input-container\">\n        <label for=\"nome\">Nome do Cliente: </label>\n        <input type=\"text\" id=\"nome\" name=\"nome\" v-model=\"nome\" placeholder=\"Digite o seu nome\">\n      </div>\n      <div class=\"input-container\">\n        <label for=\"pao\">Escolha o tipo de pão</label>\n        <select name=\"pao\" id=\"pao\" v-model=\"pao\">\n            <option value=\"\">Selecione o seu pão</option>\n            <option v-for=\"pao in paes\" :key=\"pao.id\" :value=\"pao.tipo\">\n            {{pao.tipo}}</option>\n        </select>\n      </div>\n      <div class=\"input-container\">\n        <label for=\"carne\">Escolha o tipo de carne</label>\n        <select name=\"carne\" id=\"carne\" v-model=\"carne\">\n            <option value=\"\">Selecione o tipo de carne</option>\n            <option v-for=\"carne in carnes\" :key=\"carne.id\" :value=\"carne.tipo\">\n            {{carne.tipo}}</option>\n        </select>\n      </div>\n      <div id=\"opcionais-container\" class=\"input-container\">\n        <label id=\"opcionais-title\" for=\"opcionais\">Selecione os opcionais:</label>\n        <div class=\"checkbox-container\" v-for=\"opcional in opcionaisdata\" :key=\"opcional.id\">\n          <input type=\"checkbox\" name=\"opcionais\" v-model=\"opcionais\" :value=\"opcional.tipo\">\n          <span>{{ opcional.tipo }}</span>\n        </div>\n      </div>\n      <div class=\"input-container\">\n        <input type=\"submit\" class=\"submit-btn\" value=\"Criar meu burger!\">\n      </div>\n    </form>\n  </div>\n</template>\n\n\n<script>\nimport MessageComponent from \"./MessageComponent.vue\";\n\nexport default {\n  name: \"BurgerFormComponent\",\n  data() {\n    return {\n      paes: null,\n      carnes: null,\n      opcionaisdata: null,\n      nome: null,\n      pao: null,\n      carne: null,\n      opcionais: [],\n      msg: null\n    }\n  },\n  methods: {\n    async getIngredientes() {\n      \n      const req = await fetch(\"http://localhost:3000/ingredientes\");\n      const data = await req.json();\n\n      this.message = `Pedido nº ${res.id} criado com sucesso!`\n      this.paes = data.paes\n      this.carnes = data.carnes\n      this.opcionaisdata = data.opcionais\n    },\n    async createBurger(e) {\n      e.preventDefault();\n      const data = {\n        nome: this.nome,\n        carne: this.carne,\n        pao: this.pao,\n        opcionais: Array.from(this.opcionais),\n        status: \"Solicitado\"\n      }\n\n      const dataJson = JSON.stringify(data);\n\n      const req = await fetch(\"http://localhost:3000/burgers\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: dataJson\n      })\n\n      const res = await req.json();\n      \n    }\n  },\n  mounted() {\n    this.getIngredientes()\n  },\n  components: {\n    MessageComponent\n  }\n  \n}\n</script>\n\n<style scoped>\n  #burger-form-component {\n    max-width: 400px;\n    margin: 0 auto;\n  }\n  .input-container {\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 20px;\n  }\n\n  label {\n    font-weight: bold;\n    margin-bottom: 15px;\n    color: #222;\n    padding: 5px 10px;\n    border-left: 4px solid #FCBA03;\n  }\n\n  input, select {\n    padding: 5px 10px;\n    width: 300px;\n  }\n\n  #opcionais-container {\n    flex-direction: row;\n    flex-wrap: wrap;\n  }\n\n  #opcionais-title {\n    width: 100%;\n  }\n\n  .checkbox-container {\n    display: flex;\n    align-items: flex-start;\n    width: 50%;\n    margin-bottom: 20px;\n  }\n\n  .checkbox-container span,\n  .checkbox-container input {\n    width: auto;\n  }\n\n  .checkbox-container span {\n    margin-left: 6px;\n    font-weight: bold;\n  }\n\n  .submit-btn {\n    background-color: #222;\n    color: #FCBA03;\n    font-weight: bold;\n    border: 2px solid #222;\n    padding: 10px;\n    font-size: 16px;\n    margin: 0 auto;\n    cursor: pointer;\n    transition: .5s;\n  }\n\n  .submit-btn:hover {\n    background-color: transparent;\n    color: #222;\n  }\n\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}